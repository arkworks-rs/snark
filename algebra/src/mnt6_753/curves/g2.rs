use crate::mnt6_753::{self, g1, Fq, Fq3, Fr, FQ_ZERO, FR_ONE};
use algebra_core::{
    biginteger::BigInteger768,
    curves::{
        mnt6,
        mnt6::MNT6Parameters,
        models::{ModelParameters, SWModelParameters},
    },
    field_new,
};

pub type G2Affine = mnt6::G2Affine<mnt6_753::Parameters>;
pub type G2Projective = mnt6::G2Projective<mnt6_753::Parameters>;
pub type G2Prepared = mnt6::G2Prepared<mnt6_753::Parameters>;

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl ModelParameters for Parameters {
    type BaseField = Fq3;
    type ScalarField = Fr;
}

/// MUL_BY_A_C0 = NONRESIDUE * COEFF_A
#[rustfmt::skip]
pub const MUL_BY_A_C0: Fq = field_new!(Fq, BigInteger768([
    10895242587870565906,
    6757387713923212228,
    12683949709867392876,
    1229095484098138811,
    18111217745394181988,
    3648021353977015866,
    7900332254549424237,
    5988529219097278134,
    11544487525720487778,
    7317517692149492894,
    9905728181042915773,
    470678396104534
]));

/// MUL_BY_A_C1 = NONRESIDUE * COEFF_A
#[rustfmt::skip]
pub const MUL_BY_A_C1: Fq = field_new!(Fq, BigInteger768([
    10895242587870565906,
    6757387713923212228,
    12683949709867392876,
    1229095484098138811,
    18111217745394181988,
    3648021353977015866,
    7900332254549424237,
    5988529219097278134,
    11544487525720487778,
    7317517692149492894,
    9905728181042915773,
    470678396104534
]));

/// MUL_BY_A_C2 = COEFF_A
pub const MUL_BY_A_C2: Fq = g1::Parameters::COEFF_A;

impl SWModelParameters for Parameters {
    const COEFF_A: Fq3 = mnt6_753::Parameters::TWIST_COEFF_A;
    // B coefficient of MNT6-753 G2 =
    // ```
    // mnt6753_twist_coeff_b = mnt6753_Fq3(mnt6753_G1::coeff_b * mnt6753_Fq3::non_residue,
    //                                  mnt6753_Fq::zero(), mnt6753_Fq::zero());
    // non_residue = mnt6753_Fq3::non_residue = mnt6753_Fq("11");
    //  = (G1_B_COEFF * NON_RESIDUE, ZERO, ZERO);
    //  =
    //  (2189526091197672465268098090392210500740714959757583916377481826443393499947557697773546040576162515434508768057245887856591913752342600919117433675080691499697020523783784738694360040853591723916201150207746019687604267190251,
    //  0, 0)
    // ```
    #[rustfmt::skip]
    const COEFF_B: Fq3 = field_new!(
        Fq3,
        field_new!(Fq, BigInteger768([
                3284231658830416104,
                13720030246451177991,
                6276939417009443243,
                8340612253649729185,
                4863511590806861670,
                15883218135158530927,
                4865336109262680856,
                16600307443495218926,
                10112528487499131659,
                17308657107605697754,
                5326857497786417651,
                206191604157846
        ])),
        FQ_ZERO,
        FQ_ZERO,
    );

    /// COFACTOR =
    /// 1
    #[rustfmt::skip]
    const COFACTOR: &'static [u64] = &[1];

    /// COFACTOR^(-1) mod r =
    /// 1
    #[rustfmt::skip]
    const COFACTOR_INV: Fr = FR_ONE;

    /// AFFINE_GENERATOR_COEFFS = (G2_GENERATOR_X, G2_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G2_GENERATOR_X, G2_GENERATOR_Y);

    #[inline(always)]
    fn mul_by_a(elt: &Fq3) -> Fq3 {
        field_new!(
            Fq3,
            MUL_BY_A_C0 * &elt.c1,
            MUL_BY_A_C1 * &elt.c2,
            MUL_BY_A_C2 * &elt.c0,
        )
    }
}

const G2_GENERATOR_X: Fq3 =
    field_new!(Fq3, G2_GENERATOR_X_C0, G2_GENERATOR_X_C1, G2_GENERATOR_X_C2);
const G2_GENERATOR_Y: Fq3 =
    field_new!(Fq3, G2_GENERATOR_Y_C0, G2_GENERATOR_Y_C1, G2_GENERATOR_Y_C2);

// Generator of G2
// These are three Fq elements each because X and Y (and Z) are elements of Fq^3
// X = 46538297238006280434045879335349383221210789488441126073640895239023832290080310125413049878152095926176013036314720850781686614265244307536450228450615346834324267478485994670716807428718518299710702671895190475661871557310,
// 10329739935427016564561842963551883445915701424214177782911128765230271790215029185795830999583638744119368571742929964793955375930677178544873424392910884024986348059137449389533744851691082159233065444766899262771358355816328,
// 19962817058174334691864015232062671736353756221485896034072814261894530786568591431279230352444205682361463997175937973249929732063490256813101714586199642571344378012210374327764059557816647980334733538226843692316285591005879,
// Y = 5648166377754359996653513138027891970842739892107427747585228022871109585680076240624013411622970109911154113378703562803827053335040877618934773712021441101121297691389632155906182656254145368668854360318258860716497525179898,
// 26817850356025045630477313828875808893994935265863280918207940412617168254772789578700316551065949899971937475487458539503514034928974530432009759562975983077355912050606509147904958229398389093697494174311832813615564256810453,
// 32332319709358578441696731586704495581796858962594701633932927358040566210788542624963749336109940335257143899293177116050031684054348958813290781394131284657165540476824211295508498842102093219808642563477603392470909217611033,
// Z = 1.
#[rustfmt::skip]
pub const G2_GENERATOR_X_C0: Fq = field_new!(Fq, BigInteger768([
    10851632081534502623,
    2293958624975688101,
    188919536117884749,
    17860331619214007027,
    1887803711364835009,
    12024909542936874634,
    10408468762840763117,
    2218994925646485884,
    5852783618064312507,
    5105630124344468993,
    15624271947652004457,
    343291609063118
]));

#[rustfmt::skip]
pub const G2_GENERATOR_X_C1: Fq = field_new!(Fq, BigInteger768([
    5125421133817098708,
    4635671833371751021,
    5021088233911155688,
    1910278417010696574,
    15893067539329770376,
    13275414949851777243,
    5574902941155169916,
    11685892668191778913,
    39603799641674991,
    15923769296743881818,
    2229648642576712242,
    271230940026616
]));

#[rustfmt::skip]
pub const G2_GENERATOR_X_C2: Fq = field_new!(Fq, BigInteger768([
    13312714422637623631,
    7908936083790331333,
    16404290491319144526,
    10468940401598991065,
    16719607066400875106,
    12786278203212966733,
    12073070934010646425,
    3586662858255838647,
    15314405800929445490,
    17316524929057257003,
    11733547285987599962,
    369098436863856
]));

#[rustfmt::skip]
pub const G2_GENERATOR_Y_C0: Fq = field_new!(Fq, BigInteger768([
    7838343860819620738,
    6475978215607342230,
    6907947951617093760,
    4877650884610899013,
    5572804598516141830,
    2857981775984637133,
    7047604422681304779,
    14272181022877590717,
    11871160228234478242,
    6227559544769149955,
    13648209694541221286,
    92423087846120
]));

#[rustfmt::skip]
pub const G2_GENERATOR_Y_C1: Fq = field_new!(Fq, BigInteger768([
    7399349695289784545,
    10343186604152989839,
    5569933740221267149,
    16274755507370250244,
    17881568224199186382,
    13445460868909972033,
    8855491571276536451,
    4029003301327442037,
    17200334844901331034,
    5623722999341396242,
    1043926657758222554,
    345951167723219
]));

#[rustfmt::skip]
pub const G2_GENERATOR_Y_C2: Fq = field_new!(Fq, BigInteger768([
    16283109937764686785,
    12936144524232368259,
    851410484573527812,
    13652212824151377038,
    1687600484300677308,
    13313718100971044033,
    7296597353247060371,
    11678393821640342983,
    3610823548198042284,
    9307794189036495061,
    7861574050710227414,
    380700544770643
]));
