use crate::mnt6_753::{self, Fq, Fr, FR_ONE};
use algebra_core::{
    biginteger::BigInteger768,
    curves::{
        mnt6,
        models::{ModelParameters, SWModelParameters},
    },
    field_new,
};

pub type G1Affine = mnt6::G1Affine<mnt6_753::Parameters>;
pub type G1Projective = mnt6::G1Projective<mnt6_753::Parameters>;
pub type G1Prepared = mnt6::G1Prepared<mnt6_753::Parameters>;

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl ModelParameters for Parameters {
    type BaseField = Fq;
    type ScalarField = Fr;
}

impl SWModelParameters for Parameters {
    /// COEFF_A = 11
    #[rustfmt::skip]
    const COEFF_A: Fq = field_new!(Fq, BigInteger768([
        5145524327033718740,
        14149824967095184544,
        5159730833497260295,
        3902941467692815387,
        15830098551216085679,
        8665641533746801158,
        17502192300007146323,
        14483698255198590748,
        546300946688995976,
        4331975528992054828,
        5311428878520309260,
        495362057711802,
    ]));

    /// COEFF_B =
    #[rustfmt::skip]
    const COEFF_B: Fq = field_new!(Fq, BigInteger768([
        8828711393625909642,
        12722539140758597443,
        2303826860244282256,
        8063890988281098391,
        6269149169423748670,
        3425772737529456013,
        1457017085322601211,
        5177155908178255133,
        18057960053344868113,
        10481469207136524576,
        17888199912367160320,
        290288558853910,
    ]));

    /// COFACTOR = 1
    const COFACTOR: &'static [u64] = &[1];

    /// COFACTOR^(-1) mod r =
    /// 1
    #[rustfmt::skip]
    const COFACTOR_INV: Fr = FR_ONE;

    /// AFFINE_GENERATOR_COEFFS = (G1_GENERATOR_X, G1_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G1_GENERATOR_X, G1_GENERATOR_Y);
}

// Generator of G1
// X = 16364236387491689444759057944334173579070747473738339749093487337644739228935268157504218078126401066954815152892688541654726829424326599038522503517302466226143788988217410842672857564665527806044250003808514184274233938437290,
// Y = 4510127914410645922431074687553594593336087066778984214797709122300210966076979927285161950203037801392624582544098750667549188549761032654706830225743998064330900301346566408501390638273322467173741629353517809979540986561128,
// Z = 1.
/// G1_GENERATOR_X =
#[rustfmt::skip]
pub const G1_GENERATOR_X: Fq = field_new!(Fq, BigInteger768([
    13679520475591086443,
    2885136257016027368,
    11066012770060586598,
    5703030954402099790,
    3190768979802679266,
    6582995058780951235,
    5128324295984695312,
    1016733259901042723,
    17321836123078146775,
    8899743831920183727,
    9524148587687792298,
    115184260559151,
]));

/// G1_GENERATOR_Y =
#[rustfmt::skip]
pub const G1_GENERATOR_Y: Fq = field_new!(Fq, BigInteger768([
    12838766614814920872,
    11227272155367303431,
    9667298518712466279,
    2515147449921847221,
    12901526649129916826,
    14043676281050491370,
    6526808858766215037,
    2720702495038125485,
    5084284651197010970,
    7160614230104399452,
    4659354110445863515,
    215718083283178,
]));
