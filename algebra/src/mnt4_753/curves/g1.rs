use crate::mnt4_753::{self, Fq, Fr, FR_ONE};
use algebra_core::{
    biginteger::BigInteger768,
    curves::{
        mnt4,
        models::{ModelParameters, SWModelParameters},
    },
    field_new,
};

pub type G1Affine = mnt4::G1Affine<mnt4_753::Parameters>;
pub type G1Projective = mnt4::G1Projective<mnt4_753::Parameters>;
pub type G1Prepared = mnt4::G1Prepared<mnt4_753::Parameters>;

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl ModelParameters for Parameters {
    type BaseField = Fq;
    type ScalarField = Fr;
}

impl SWModelParameters for Parameters {
    /// COEFF_A = 2
    #[rustfmt::skip]
    const COEFF_A: Fq = field_new!(Fq, BigInteger768([
            3553860551672651396,
            2565472393707818253,
            3424927325234966109,
            17487811826058095619,
            15730291918544907998,
            4332070408724822737,
            7212646118208244402,
            12904649141092619460,
            9289117987390442562,
            2254330573517213976,
            3065472942259520298,
            271095073719429,
    ]));

    /// COEFF_B = 0x01373684A8C9DCAE7A016AC5D7748D3313CD8E39051C596560835DF0C9E50A5B59B882A92C78DC537E51A16703EC9855C77FC3D8BB21C8D68BB8CFB9DB4B8C8FBA773111C36C8B1B4E8F1ECE940EF9EAAD265458E06372009C9A0491678EF4
    #[rustfmt::skip]
    const COEFF_B: Fq = field_new!(Fq, BigInteger768([
            2672638521926201442,
            17587766986973859626,
            1309143029066506763,
            1756412671449422902,
            5395165286423163724,
            589638022240022974,
            7360845090332416697,
            9829497896347590557,
            9341553552113883496,
            5888515763059971584,
            10173739464651404689,
            456607542322059,
    ]));

    /// COFACTOR = 1
    const COFACTOR: &'static [u64] = &[1];

    /// COFACTOR^(-1) mod r =
    /// 1
    #[rustfmt::skip]
    const COFACTOR_INV: Fr = FR_ONE;

    /// AFFINE_GENERATOR_COEFFS = (G1_GENERATOR_X, G1_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G1_GENERATOR_X, G1_GENERATOR_Y);
}

// Generator of G1
// X = 23803503838482697364219212396100314255266282256287758532210460958670711284501374254909249084643549104668878996224193897061976788052185662569738774028756446662400954817676947337090686257134874703224133183061214213216866019444443,
// Y = 21091012152938225813050540665280291929032924333518476279110711148670464794818544820522390295209715531901248676888544060590943737249563733104806697968779796610374994498702698840169538725164956072726942500665132927942037078135054,
/// G1_GENERATOR_X =
#[rustfmt::skip]
pub const G1_GENERATOR_X: Fq = field_new!(Fq, BigInteger768([
    8680369219962409717,
    12497683146525997170,
    15236963532390397985,
    105054743605190980,
    11580223711797947725,
    5964558218084543687,
    1974179831852844611,
    13386218610606908614,
    9905737029079781539,
    3769381095189112747,
    1226496298859043045,
    409264833279765
]));

/// G1_GENERATOR_Y =
#[rustfmt::skip]
pub const G1_GENERATOR_Y: Fq = field_new!(Fq, BigInteger768([
    8458069647833709466,
    16863815841372543189,
    7230518365128572001,
    17250077086581959530,
    15519583030873909149,
    3465247978511199450,
    5738818931561455055,
    12688417287395938373,
    3681991682605141223,
    10698656566578986929,
    10160396483421745615,
    127251255182962
]));
